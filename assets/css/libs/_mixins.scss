@import "settings";
@import "compass/css3";
@import "compass/utilities";


// Display
// -------------------------------------------------------

@mixin inline-block {
	display: inline-block;
	_display: block;
	*display: block;
	*zoom: 1;
}

@mixin square($size:'') {
	height: 0;
	padding-bottom: 0% + $size;
	width: 0% + $size;
}


// Transitions
// -------------------------------------------------------

@mixin transition {
	-webkit-transition: all .2s;
	-moz-transition: all .2s;
	-o-transition: all .2s;
	transition: all .2s;
}

@mixin transition-colour {
	-webkit-transition: color .2s, background-color .2s;
	-moz-transition: color .2s, background-color .2s;
	-o-transition: color .2s, background-color .2s;
	transition: color .2s, background-color .2s;
}

@mixin transition-long {
	-webkit-transition: all .4s;
	-moz-transition: all .4s;
	-o-transition: all .4s;
	transition: all .4s;
}


// List styles
// -------------------------------------------------------

@mixin unordered {
	list-style-position: outside;
	list-style-type: disc;
}

@mixin unordered-inside {
	list-style-position: inside;
	list-style-type: disc;
}

@mixin ordered {
	list-style-position: outside;
	list-style-type: decimal;
}

@mixin ordered-inside {
	list-style-position: inside;
	list-style-type: decimal;
}

@mixin nobullet {
	list-style-type: none;
}


// Advanced typography settings
// -------------------------------------------------------

@mixin advancedtype {
	font-variant-ligatures: contextual;
	-moz-font-feature-settings: "liga=1,dlig=1";
	font-kerning: normal;
	font-synthesis: none;
}


// Retina images. 
// -------------------------------------------------------

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
	/* on retina, use image that's scaled by 2 */
	background-image: url($image);
	background-size: $width $height;
	}
}


// Grid
// -------------------------------------------------------

@mixin grid-row($behavior: false) {
	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		width: auto;
		margin-left: -($column-gutter/2);
		margin-right: -($column-gutter/2);
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
	}
	// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		width: 100%;
		margin: 0;
		max-width: $row-width;
	}
	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		width: auto;
		margin: 0;
		max-width: none;
	}
	// use @include grid-row; to use a container row
	@else {
		margin-left: auto;
		margin-right: auto;
		margin-top: 0;
		margin-bottom: 0;
		max-width: $row-width;
	}
	// Clearfix for all rows
	@include clearfix();
}

// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:false) {
	position: relative;
	// Gutter padding whenever a column isn't set to collapse
	@if $collapse == false {
		padding-left: $column-gutter / 2;
		padding-right: $column-gutter / 2;
	}
	// If a column number is given, calculate width
	@if $columns {
		width: gridCalc($columns, $total-columns);
		// If last column, float naturally instead of to the right
		@if $last-column { float: $default-opposite; }
		// if collapsed, get rid of gutter padding
		@else if $collapse { padding-left: 0; padding-right: 0; }
	}
	@if $collapse { padding-left: 0; padding-right: 0; }
	// If offset, calculate appropriate margins
	@if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }
	// Source Ordering, adds left/right depending on which you use.
	@if $push { #{$default-float}: gridCalc($push, $total-columns); #{$default-opposite}: auto; }
	@if $pull { #{$default-opposite}: gridCalc($pull, $total-columns); #{$default-float}: auto; }
	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-left: auto;
		margin-right: auto;
	}
	@if $float {
		@if $float == left { float: $default-float; }
		@else if $float == right { float: $default-opposite; }
		@else { float: none; }
	}
}